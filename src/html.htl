<!--
/*
* Copyright 2018 Adobe. All rights reserved.
* This file is licensed to you under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License. You may obtain a copy
* of the License at http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed under
* the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
* OF ANY KIND, either express or implied. See the License for the specific language
* governing permissions and limitations under the License.
*/
-->
<!DOCTYPE html>
<html class="spectrum--large" lang="en">

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/spectrum/spectrum-core.css" />
    <link rel="stylesheet" href="/spectrum/spectrum-core-diff.css" media="(min-width: 900px)" />
    <link rel="stylesheet" href="/spectrum/spectrum-light.css" />
    <link rel="stylesheet" href="/spectrum/spectrum-css-grid.css" />
    <link rel="stylesheet" href="/global/frame.css" />
    <link rel="stylesheet" href="https://use.typekit.net/ehj8kyw.css">
    <script src="/spectrum/icons/loadIcons.js" type="text/javascript" async></script>
    <!-- 
        TODO: add better meta data attributes for SEO etc. 
    -->
    <title>${content.title}</title>
</head>

<body class="spectrum spectrum--light spectrum-Typography">
    <esi:include src="/global.topnav.html" />
    <esi:include src="${payload.dispatch.url}" />
    <esi:include src="/global.footer.html" />
    <script src="/global/intersection-observer.js" type="text/javascript"></script>
    <script type="text/javascript">
        ;
        (function (AD, undefined) {
            
            // TODO: icons should be inlined as part of helix build
            window.loadIcons('/spectrum/icons/spectrum-css-icons.svg');
            window.loadIcons('/spectrum/icons/spectrum-icons.svg');
            
            // Switch spectrum flavour at different viewports
            const mq = window.matchMedia("(min-width: 900px)");
            if (mq.matches) {
                document.documentElement.classList.remove('spectrum--large');
                document.documentElement.classList.add('spectrum--medium');
            }

            // LAZY LOAD IMAGES 
            // Mostly this code w/ a few tweaks: 
            // https://scotch.io/tutorials/lazy-loading-images-for-performance-using-intersection-observer

            // TODO: break this out into a component, think it through at scale, and write some tests
            // in the meantime, this should do the basic job.
            const loadImage = (image) => {
                const src = image.dataset.src;
                // ignore any images for which there is no `data-src` attribute
                if (src) {
                    fetchImage(src).then(() => {
                        image.src = src;
                    })
                }
            }
            const fetchImage = (url) => {
                return new Promise((resolve, reject) => {
                    const image = new Image();
                    image.src = url;
                    image.onload = resolve;
                    image.onerror = reject;
                });
            }
            const handleIntersection = (entries, observer) => {
                entries.forEach(entry => {
                    if (entry.intersectionRatio > 0) {
                        loadImage(entry.target)
                    }
                })
            }
            const options = {
                rootMargin: '0px 0px 200px 0px',
                threshold: 0.05
            };
            const observer = new IntersectionObserver(handleIntersection, options);
            // We are using a polyfill, so this IntersectionObserver should always work
            // but better safe than sorry
            if (observer) {
                const images = document.querySelectorAll('img');
                images.forEach(img => {
                    observer.observe(img);
                });
            } else {
                Array.from(images).forEach(image => loadImage(image));
            }

        }(window.AD = window.AD || {}));
    </script>
</body>

</html>